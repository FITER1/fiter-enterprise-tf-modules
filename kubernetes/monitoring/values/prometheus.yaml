global:
    pspEnabled: true

prometheusOperator:
  admissionWebhooks:
    enabled: false
  tls:
    enabled: false

kubeScheduler:
  enabled: false

kubeEtcd:
  enabled: false

kubeDns:
  enabled: false

kubeApiServer:
  enabled: false

kubeProxy:
  enabled: false

kubeControllerManager:
  enabled: false

grafana:
  resources:
    limits:
      memory: ${grafana_resources.mem_limit}
    requests:
      cpu: ${grafana_resources.cpu_request}
      memory: ${grafana_resources.mem_request}

  admin:
    existingSecret: grafana-admin-secret
    userKey: admin-user
    passwordKey: admin-password

  forceDeployDashboards: true

  sidecar:
    dashboards:
      enabled: true
      label: grafana_dashboard
      labelValue: "1"
      searchNamespace: ALL
      folder: /tmp/dashboards
      folderAnnotation: grafana_folder
      provider:
        allowUiUpdates: true
        foldersFromFilesStructure: true

  persistence:
    type: pvc
    enabled: ${enable_grafana_storage}
    storageClassName: ${storage_class_type}
    accessModes:
      - ReadWriteOnce
    size: ${grafana_storage_size}
    finalizers:
      - kubernetes.io/pvc-protection


  ##
  grafana.ini:
    paths:
      data: /var/lib/grafana/
      logs: /var/log/grafana
      plugins: /var/lib/grafana/plugins
      provisioning: /etc/grafana/provisioning
    analytics:
      check_for_updates: true
    log:
      mode: console
    dataproxy:
      logging: true
      timeout: 600
      idle_conn_timeout_seconds: 600


  %{~ if INGRESSENABLED ~}
  ingress:
    enabled: true
    ingressClassName: ${INGRESSCLASSNAME}
    %{~ if INGRESSCLASSNAME == "alb" ~}
    annotations:
      alb.ingress.kubernetes.io/target-type: ip
      alb.ingress.kubernetes.io/backend-protocol: HTTP
      alb.ingress.kubernetes.io/scheme: ${alb_ingress_scheme}
      alb.ingress.kubernetes.io/ssl-policy: ELBSecurityPolicy-FS-1-2-2019-08
    %{~ endif ~}
    hosts:
      - ${INGRESSHOSTNAME}
    %{~ if INGRESSTLSENABLED ~}
    tls:
      - secretName: monitoring-tls
        hosts:
          - ${INGRESSHOSTNAME}
    %{~ endif ~}
  %{~ endif ~}

alertmanager:
  config:
    global:
      resolve_timeout: 5m
    route:
      group_by: ['namespace'] # job
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 12h
      %{~ if SLACK_ENABLED ~}
      receiver: 'slack'
      %{~ else ~}
      receiver: 'null'
      %{~ endif ~}
      routes:
      - match:
          alertname: Watchdog
        receiver: 'null'
    # This inhibt rule is a hack from: https://stackoverflow.com/questions/54806336/how-to-silence-prometheus-alertmanager-using-config-files/54814033#54814033
    inhibit_rules:
      - target_match_re:
           alertname: '.+Overcommit'
        source_match:
           alertname: 'Watchdog'
        equal: ['prometheus']
    receivers:
    - name: 'null'
    %{~ if SLACK_ENABLED ~}
    - name: 'slack'
      slack_configs:
      - api_url: '${SLACK_HOOK_URL}'
        send_resolved: true
        channel: '#${SLACK_CHANNEL}'
        title: '[{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] Monitoring Event Notification'
        text: |-
          {{ range .Alerts }}
            *Alert:* {{ .Labels.alertname }} - `{{ .Labels.severity }}`
            *Description:* {{ .Annotations.message }}
            *Graph:* <{{ .GeneratorURL }}|:chart_with_upwards_trend:> *Runbook:* <{{ .Annotations.runbook_url }}|:spiral_note_pad:>
            *Details:*
            {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
            {{ end }}
          {{ end }}
    %{~ endif ~}

prometheus:
  prometheusSpec:
    serviceMonitorNamespaceSelector: {}
    serviceMonitorSelector: {}
    serviceMonitorSelectorNilUsesHelmValues: false
    retention: ${prometheus_retention_days}
    resources:
      requests:
        memory: ${prometheus_resource_requests}
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: ${storage_class_type}
          resources:
            requests:
              storage: ${prometheus_storage_size}


prometheus-node-exporter:
  priorityClassName: "system-node-critical"
  resources:
    limits:
      cpu: ${node_exporter_resources.cpu_limit}
      memory: ${node_exporter_resources.mem_limit}
    requests:
      cpu: ${node_exporter_resources.cpu_request}
      memory: ${node_exporter_resources.mem_request}

prometheusOperator:
  resources: 
    limits:
      memory: ${prom_operator_resources.mem_limit}
    requests:
      cpu: ${prom_operator_resources.cpu_request}
      memory: ${prom_operator_resources.mem_request}

kube-state-metrics:
  resources: 
    limits:
      memory: ${kube_state_resources.mem_limit}
    requests:
      cpu: ${kube_state_resources.cpu_request}
      memory: ${kube_state_resources.mem_request}